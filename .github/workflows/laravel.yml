name: E-library CI/CD

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  # ---------- TEST ----------
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Menyiapkan PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, dom, fileinfo, sqlite
          coverage: none

      - name: Menyiapkan env
        run: |
          cp .env.example .env
          cp .env.example .env.testing
          sed -i "s|^APP_KEY=.*|APP_KEY=base64:$(openssl rand -base64 32)|" .env
          sed -i "s|^APP_KEY=.*|APP_KEY=base64:$(openssl rand -base64 32)|" .env.testing
          sed -i "s|^APP_ENV=.*|APP_ENV=testing|" .env.testing
          sed -i "s|^DB_CONNECTION=.*|DB_CONNECTION=sqlite|" .env.testing
          sed -i "s|^DB_DATABASE=.*|DB_DATABASE=$(pwd)/database/testing.sqlite|" .env.testing

      - name: Membuat database sqlite untuk testing
        run: |
          mkdir -p database
          touch database/testing.sqlite

      - name: Install dependensi dengan composer
        run: composer install --no-interaction --no-progress --prefer-dist

      - name: Jalankan tes migrasi
        env:
          APP_ENV: testing
          DB_CONNECTION: sqlite
          DB_DATABASE: ${{ github.workspace }}/database/testing.sqlite
        run: php artisan migrate --force

      - name: Cek tabel di database
        env:
          APP_ENV: testing
          DB_CONNECTION: sqlite
          DB_DATABASE: ${{ github.workspace }}/database/testing.sqlite
        run: php artisan tinker --execute="DB::select('SELECT name FROM sqlite_master WHERE type = \'table\';')"

      - name: Jalankan seeder untuk tes
        env:
          APP_ENV: testing
          DB_CONNECTION: sqlite
          DB_DATABASE: ${{ github.workspace }}/database/testing.sqlite
        run: php artisan db:seed --force

      - name: Jalankan PHPUnit tes
        env:
          APP_ENV: testing
          DB_CONNECTION: sqlite
          DB_DATABASE: ${{ github.workspace }}/database/testing.sqlite
        run: vendor/bin/phpunit --testdox

  # ---------- DEPLOY ----------
  deploy:
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Mengatur SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy ke server VPS
        run: |
          ssh -T ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} <<EOF
            set -e
            PROJECT_DIR=/var/www/laravel-app
            cd \$PROJECT_DIR

            # --- Update repository ---
            git fetch --all
            git reset --hard origin/${{ github.ref_name }}

            # --- Memastikan .env & APP_KEY ---
            [ -f .env ] || cp .env.example .env
            if ! grep -q '^APP_KEY=base64:' .env; then
              docker run --rm -v \$(pwd):/app -w /app laravelsail/php82-composer:latest \
                php artisan key:generate --no-interaction
            fi

            # --- Build Ulang & Mulai container ---
            PHP_VER=\$(docker compose exec -T app php -r "echo PHP_VERSION;" || echo "")
            if [ "\$PHP_VER" != "\${PHP_VER/8.1/}" ]; then
              docker compose down || true
              docker compose build --no-cache --build-arg PHP_VERSION=8.2
            fi
            docker compose up -d --build
            sleep 15

            # --- Permission ---
            sudo mkdir -p storage/framework/{sessions,views,cache}
            sudo chmod -R 775 storage bootstrap/cache
            sudo chown -R \$(whoami):www-data storage bootstrap/cache

            # --- Dependensi dan Asset ---
            docker compose exec -T app composer install --no-interaction --prefer-dist --no-dev
            docker compose exec -T app npm ci
            docker compose exec -T app npm run build

            # --- Migrasi dan Optimasi ---
            docker compose exec -T app php artisan migrate --force
            docker compose exec -T app php artisan optimize:clear
            docker compose exec -T app php artisan optimize
            docker compose exec -T app php artisan queue:restart
          EOF
