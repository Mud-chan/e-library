name: Laravel CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, dom, fileinfo, sqlite
          coverage: none

      - name: Prepare environment files
        run: |
          # Copy and prepare .env files
          cp .env.example .env
          cp .env.example .env.testing
          
          # Generate secure keys using PHP directly
          php -r "file_put_contents('.env', preg_replace('/^APP_KEY=.*/m', 'APP_KEY=base64:'.base64_encode(random_bytes(32)), FILE_APPEND);"
          php -r "file_put_contents('.env.testing', preg_replace('/^APP_KEY=.*/m', 'APP_KEY=base64:'.base64_encode(random_bytes(32)), FILE_APPEND);"
          
          # Configure testing environment
          sed -i "s|^APP_ENV=.*|APP_ENV=testing|" .env.testing
          sed -i "s|^DB_CONNECTION=.*|DB_CONNECTION=sqlite|" .env.testing
          sed -i "s|^DB_DATABASE=.*|DB_DATABASE=:memory:|" .env.testing

      - name: Install Composer dependencies
        run: composer install --no-interaction --no-progress --prefer-dist

      - name: Verify and generate keys if needed
        run: |
          php artisan key:generate --force --ansi
          php artisan key:generate --env=testing --force --ansi

      - name: Set up storage permissions
        run: |
          mkdir -p storage/framework/{sessions,views,cache}
          chmod -R 775 storage bootstrap/cache

      - name: Run migrations (testing)
        env:
          APP_ENV: testing
          DB_CONNECTION: sqlite
          DB_DATABASE: ':memory:'
        run: php artisan migrate --force

  deploy:
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to VPS
        run: |
          ssh -T ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'DEPLOY_SCRIPT'
            set -e
            cd /var/www/laravel-app

            # Update repository
            git fetch --all
            git reset --hard origin/$(echo ${{ github.ref }} | sed 's|refs/heads/||')

            # Ensure proper PHP version in container
            docker-compose down || true
            docker-compose build --no-cache --build-arg PHP_VERSION=8.2
            docker-compose up -d
            sleep 15

            # Handle .env and APP_KEY securely
            if [ ! -f .env ]; then
              cp .env.example .env
              docker-compose exec -T app php artisan key:generate --force
            else
              # Backup existing .env
              cp .env .env.backup
              # Merge existing config with .env.example
              grep -v -e '^APP_KEY=' -e '^APP_ENV=' .env > .env.tmp
              grep -e '^APP_KEY=' -e '^APP_ENV=' .env.example >> .env.tmp
              mv .env.tmp .env
              # Verify and generate key if needed
              docker-compose exec -T app php artisan key:generate --force || true
            fi

            # Set permissions
            sudo mkdir -p storage/framework/{sessions,views,cache}
            sudo chmod -R 775 storage bootstrap/cache
            sudo chown -R $USER:www-data storage bootstrap/cache

            # Install dependencies
            docker-compose exec -T app composer install --no-interaction --prefer-dist --no-dev --ignore-platform-reqs

            # Cache and optimize
            docker-compose exec -T app php artisan config:clear
            docker-compose exec -T app php artisan cache:clear
            docker-compose exec -T app php artisan view:clear
            docker-compose exec -T app php artisan config:cache
            docker-compose exec -T app php artisan route:cache
            docker-compose exec -T app php artisan view:cache
            docker-compose exec -T app php artisan queue:restart
          DEPLOY_SCRIPT
