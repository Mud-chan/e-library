name: Laravel CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # PHP & Composer
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, dom, fileinfo, sqlite
          coverage: none

      # ──────────── ENV FILES ────────────
      - name: Prepare environment files
        run: |
          cp .env.example .env
          cp .env.example .env.testing
          sed -i 's/^APP_ENV=.*/APP_ENV=testing/' .env.testing
          sed -i 's/^DB_CONNECTION=.*/DB_CONNECTION=sqlite/' .env.testing
          sed -i 's/^DB_DATABASE=.*/DB_DATABASE=:memory:/' .env.testing

      # ──────────── DEPENDENCIES ────────────
      - name: Install Composer dependencies
        run: composer install --no-interaction --no-progress --prefer-dist

      # ──────────── APP KEYS ────────────
      - name: Generate app key (development)
        run: php artisan key:generate --ansi

      - name: Generate app key (testing)
        run: php artisan key:generate --env=testing --ansi

      # Set permissions properly (no 777)
      - name: Set proper permissions
        run: |
          mkdir -p storage/framework/{sessions,views,cache}
          chmod -R 775 storage bootstrap/cache
          chown -R $USER:www-data storage bootstrap/cache

      # Jalankan migrasi di environment testing
      - name: Run migrations (testing)
        env:
          APP_ENV: testing
          DB_CONNECTION: sqlite
          DB_DATABASE: ':memory:'
        run: php artisan migrate --force

      # Run tests
      - name: Execute tests
        run: php artisan test

  # ───────────────────── DEPLOY ─────────────────────
  deploy:
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to VPS with Docker
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -e # Exit immediately if a command exits with a non-zero status
            
            cd /var/www/laravel-app

            # Update repository
            if [ ! -d .git ]; then
              git clone ${{ github.server_url }}/${{ github.repository }} .
            else
              git fetch --all
              git reset --hard origin/$(echo ${{ github.ref }} | sed 's|refs/heads/||')
            fi

            # Prepare .env if missing
            if [ ! -f .env ]; then
              cp .env.example .env
              sed -i 's/DB_HOST=.*/DB_HOST=mysql/' .env
              sed -i 's/DB_DATABASE=.*/DB_DATABASE=laravel/' .env
              sed -i 's/DB_USERNAME=.*/DB_USERNAME=laravel_user/' .env
              sed -i 's/DB_PASSWORD=.*/DB_PASSWORD=laravel_password/' .env
            fi

            # Set proper permissions (avoid 777)
            mkdir -p storage/framework/{sessions,views,cache}
            chmod -R 775 storage bootstrap/cache
            chown -R $USER:www-data storage bootstrap/cache

            # Docker workflow
            docker-compose down || true
            docker-compose build --no-cache
            docker-compose up -d

            # Wait for containers to be ready
            sleep 15

            # Inside container commands
            docker-compose exec -T app composer install --no-interaction --prefer-dist --no-dev
            docker-compose exec -T app php artisan key:generate --force
            docker-compose exec -T app php artisan migrate --force
            docker-compose exec -T app php artisan config:clear
            docker-compose exec -T app php artisan cache:clear
            docker-compose exec -T app php artisan view:clear
            docker-compose exec -T app php artisan config:cache
            docker-compose exec -T app php artisan route:cache
            docker-compose exec -T app php artisan view:cache
            docker-compose exec -T app php artisan queue:restart
          EOF
